--------------------
./configure --static --prefix=/home/jv/dev/spatiasql.js/src/install_bc
Tue Apr 28 14:00:33 CEST 2015
=== ztest13152.c ===
extern int getchar();
int hello() {return getchar();}
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c ztest13152.c
... using /home/jv/dev/emsdk_portable/emscripten/master/emcc

Checking for obsessive-compulsive compiler options...
=== ztest13152.c ===
int foo() { return 0; }
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c ztest13152.c

Building static library libz.a version 1.2.8 with /home/jv/dev/emsdk_portable/emscripten/master/emcc.

=== ztest13152.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c -D_LARGEFILE64_SOURCE=1 ztest13152.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest13152.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -D_LARGEFILE64_SOURCE=1 -o ztest13152 ztest13152.c
Checking for strerror... Yes.

=== ztest13152.c ===
#include <unistd.h>
int main() { return 0; }
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c -D_LARGEFILE64_SOURCE=1 ztest13152.c
Checking for unistd.h... Yes.

=== ztest13152.c ===
#include <stdarg.h>
int main() { return 0; }
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c -D_LARGEFILE64_SOURCE=1 ztest13152.c
Checking for stdarg.h... Yes.

=== ztest13152.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c -D_LARGEFILE64_SOURCE=1 ztest13152.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest13152.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -D_LARGEFILE64_SOURCE=1 -o ztest13152 ztest13152.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest13152.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c -D_LARGEFILE64_SOURCE=1 ztest13152.c
Checking for return value of vsnprintf()... Yes.

ALL = static all64
AR = /home/jv/dev/emsdk_portable/emscripten/master/emar
ARFLAGS = rc
CC = /home/jv/dev/emsdk_portable/emscripten/master/emcc
CFLAGS = -D_LARGEFILE64_SOURCE=1
CPP = /home/jv/dev/emsdk_portable/emscripten/master/emcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = /home/jv/dev/emsdk_portable/emscripten/master/emcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = /home/jv/dev/emsdk_portable/emscripten/master/emranlib
SFLAGS = -D_LARGEFILE64_SOURCE=1
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/jv/dev/spatiasql.js/src/install_bc
sharedlibdir = ${libdir}
uname = Linux 3.19.2-pclos1
--------------------


--------------------
./configure --static --prefix=/home/jv/dev/spatiasql.js/src/install_bc
Tue Apr 28 14:10:56 CEST 2015
=== ztest31637.c ===
extern int getchar();
int hello() {return getchar();}
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c ztest31637.c
... using /home/jv/dev/emsdk_portable/emscripten/master/emcc

Checking for obsessive-compulsive compiler options...
=== ztest31637.c ===
int foo() { return 0; }
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c ztest31637.c

Building static library libz.a version 1.2.8 with /home/jv/dev/emsdk_portable/emscripten/master/emcc.

=== ztest31637.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c -D_LARGEFILE64_SOURCE=1 ztest31637.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest31637.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -D_LARGEFILE64_SOURCE=1 -o ztest31637 ztest31637.c
Checking for strerror... Yes.

=== ztest31637.c ===
#include <unistd.h>
int main() { return 0; }
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c -D_LARGEFILE64_SOURCE=1 ztest31637.c
Checking for unistd.h... Yes.

=== ztest31637.c ===
#include <stdarg.h>
int main() { return 0; }
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c -D_LARGEFILE64_SOURCE=1 ztest31637.c
Checking for stdarg.h... Yes.

=== ztest31637.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c -D_LARGEFILE64_SOURCE=1 ztest31637.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest31637.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -D_LARGEFILE64_SOURCE=1 -o ztest31637 ztest31637.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest31637.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
/home/jv/dev/emsdk_portable/emscripten/master/emcc -c -D_LARGEFILE64_SOURCE=1 ztest31637.c
Checking for return value of vsnprintf()... Yes.

ALL = static all64
AR = /home/jv/dev/emsdk_portable/emscripten/master/emar
ARFLAGS = rc
CC = /home/jv/dev/emsdk_portable/emscripten/master/emcc
CFLAGS = -D_LARGEFILE64_SOURCE=1
CPP = /home/jv/dev/emsdk_portable/emscripten/master/emcc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = /home/jv/dev/emsdk_portable/emscripten/master/emcc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = /home/jv/dev/emsdk_portable/emscripten/master/emranlib
SFLAGS = -D_LARGEFILE64_SOURCE=1
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/jv/dev/spatiasql.js/src/install_bc
sharedlibdir = ${libdir}
uname = Linux 3.19.2-pclos1
--------------------


